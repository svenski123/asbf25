// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {deploy_bytecode, get_ctf, Ilevel} from "test/lib/CTF.t.sol";
import {Test, console2} from "forge-std/Test.sol";
import {Isolution2, Level2Template, Level2TemplateYul} from "../src/Lvl2.sol";

contract Lvl2Test is Test {
    Isolution2 lvl2;
    Ilevel ctf;

    function setUp() public {
	ctf = get_ctf(2);
	if (false) {
        //lvl2 = new Level2Template();
	lvl2 = Level2TemplateYul();
	} else {
	    bytes memory bc =
		//hex"61020f80600a3d393df3610124356101043560e43560c43560a4356084356064356044356024356004358082101561002957905b8083101561003357915b8084101561003d57925b8085101561004757935b8086101561005157945b8087101561005b57955b8088101561006557965b8089101561006f57975b808a101561007957985b908083101561008457915b8084101561008e57925b8085101561009857935b808610156100a257945b808710156100ac57955b808810156100b657965b808910156100c057975b808a10156100ca57985b91808410156100d557925b808510156100df57935b808610156100e957945b808710156100f357955b808810156100fd57965b8089101561010757975b808a101561011157985b928085101561011c57935b8086101561012657945b8087101561013057955b8088101561013a57965b8089101561014457975b808a101561014e57985b938086101561015957945b8087101561016357955b8088101561016d57965b8089101561017757975b808a101561018157985b948087101561018c57955b8088101561019657965b808910156101a057975b808a10156101aa57985b95808810156101b557965b808910156101bf57975b808a10156101c957985b96808910156101d457975b808a10156101de57985b97808a10156101e957985b98610120525f5260205260405260605260805260a05260c05260e052610100526101405ff3";
		//	    hex"6101e280600a3d393df3610124356101043560e43560c43560a43560843560643560443560243560043580821161002857905b80831161003157915b80841161003a57925b80851161004357935b80861161004c57945b80871161005557955b80881161005e57965b80891161006757975b808a1161007057985b9080831161007a57915b80841161008357925b80851161008c57935b80861161009557945b80871161009e57955b8088116100a757965b8089116100b057975b808a116100b957985b918084116100c357925b8085116100cc57935b8086116100d557945b8087116100de57955b8088116100e757965b8089116100f057975b808a116100f957985b9280851161010357935b80861161010c57945b80871161011557955b80881161011e57965b80891161012757975b808a1161013057985b9380861161013a57945b80871161014357955b80881161014c57965b80891161015557975b808a1161015e57985b9480871161016857955b80881161017157965b80891161017a57975b808a1161018357985b9580881161018d57965b80891161019657975b808a1161019f57985b968089116101a957975b808a116101b257985b97808a116101bc57985b98610120525f5260205260405260605260805260a05260c05260e052610100526101405ff3";
		//	    hex"6101d980600a3d393df35f610124356101043560e43560c43560a43560843560643560443560243560043580821161002957905b80831161003257915b80841161003b57925b80851161004457935b80861161004d57945b80871161005657955b80881161005f57965b80891161006857975b808a1161007157985b9080831161007b57915b80841161008457925b80851161008d57935b80861161009657945b80871161009f57955b8088116100a857965b8089116100b157975b808a116100ba57985b918084116100c457925b8085116100cd57935b8086116100d657945b8087116100df57955b8088116100e857965b8089116100f157975b808a116100fa57985b9280851161010457935b80861161010d57945b80871161011657955b80881161011f57965b80891161012857975b808a1161013157985b9380861161013b57945b80871161014457955b80881161014d57965b80891161015657975b808a1161015f57985b9480871161016957955b80881161017257965b80891161017b57975b808a1161018457985b9580881161018e57965b80891161019757975b808a116101a057985b968089116101aa57975b808a116101b357985b97808a106101bd57985b995059525952595259525952595259525952595259526101405ff3";
	    hex"6101cc80600a3d393df360043560243560443560643560843560a43560c43560e435610104356101243589811061002857985b88811061003157975b87811061003a57965b86811061004357955b85811061004c57945b84811061005557935b83811061005e57925b82811061006757915b81811061007057905b595288811061007b57975b87811061008457965b86811061008d57955b85811061009657945b84811061009f57935b8381106100a857925b8281106100b157915b8181106100ba57905b59528781106100c557965b8681106100ce57955b8581106100d757945b8481106100e057935b8381106100e957925b8281106100f257915b8181106100fb57905b595286811061010657955b85811061010f57945b84811061011857935b83811061012157925b82811061012a57915b81811061013357905b595285811061013e57945b84811061014757935b83811061015057925b82811061015957915b81811061016257905b595284811061016d57935b83811061017657925b82811061017f57915b81811061018857905b595283811061019357925b82811061019c57915b8181106101a557905b59528281106101b057915b8181106101b957905b59528181106101c457905b59525952595ff3";
	    address adr; assembly { adr := create(0, add(bc, 0x20), mload(bc)) } lvl2 = Isolution2(adr);
	}
    }

    function test0() public view {
	uint[10] memory x = lvl2.solution([uint(0),1,2,3,4,5,6,7,8,9]);
	for (uint i = 0; i < 10; i++)
	    assert(x[i] == i);
    }

    /*
    function test_sort4() public view {
	for (uint i = 0; i < 4; i++) {
	    for (uint j = 0; j < 4; j++) {
		if (i == j) continue;
		for (uint k = 0; k < 4; k++) {
		    if (i == k) continue;
		    if (j == k) continue;
		    for (uint l = 0; l < 4; l++) {
			if (i == l) continue;
			if (j == l) continue;
			if (k == l) continue;
			(uint a, uint b, uint c, uint d) = lvl2.sort4(i, j, k, l);
			assertEq(0, a);
			assertEq(1, b);
			assertEq(2, c);
			assertEq(3, d);
		    }
		}
	    }
	}
    }
    */

    /*
    function test_sort5() public view {
	for (uint i = 0; i < 5; i++) {
	    for (uint j = 0; j < 5; j++) {
		if (i == j) continue;
		for (uint k = 0; k < 5; k++) {
		    if (i == k) continue;
		    if (j == k) continue;
		    for (uint l = 0; l < 5; l++) {
			if (i == l) continue;
			if (j == l) continue;
			if (k == l) continue;
			for (uint m = 0; m < 5; m++) {
			    if (i == m) continue;
			    if (j == m) continue;
			    if (k == m) continue;
			    if (l == m) continue;
			    (uint a, uint b, uint c, uint d, uint e) = lvl2.sort5(i, j, k, l, m);
			    assertEq(0, a);
			    assertEq(1, b);
			    assertEq(2, c);
			    assertEq(3, d);
			    assertEq(4, e);
			}
		    }
		}
	    }
	}
    }
    */

    function test_sort10_case0() public view {
	uint[10] memory x = lvl2.solution([uint(0), 1, 3, 2, 5, 6, 7, 4, 8, 9]);
	for (uint z=1; z<10; z++) {
	    assert(x[z-1] <= x[z]);
	}
    }

    function test_sort10_case1() public view {
	uint[10] memory x = lvl2.solution([uint(99), 4, 7, 1, 8, 14, 1, 90, 3, 5]);
	for (uint z=1; z<10; z++) {
	    assert(x[z-1] <= x[z]);
	}
    }

    function test_sort10() public view {
	for (uint i=0; i<1/*0*/; i++) {
	    for (uint j=0; j<1/*0*/; j++) {
		if (i==j) continue;
		for (uint k=0; k<10; k++) {
		    if (i==k||j==k) continue;
		    for (uint l=0; l<10; l++) {
			if (i==l||j==l||k==l) continue;
			for (uint m=0; m<10; m++) {
			    if (i==m||j==m||k==m||l==m) continue;
			    for (uint n=0; n<10; n++) {
				if (i==n||j==n||k==n||l==n||m==n) continue;
				for (uint o=0; o<10; o++) {
				    if (i==o||j==o||k==o||l==o||m==o||n==o) continue;
				    for (uint p=0; p<10; p++) {
					if (i==p||j==p||k==p||l==p||m==p||n==p||o==p) continue;
					for (uint q=0; q<10; q++) {
					    if (i==q||j==q||k==q||l==q||m==q||n==q||o==q||p==q) continue;
					    for (uint r=0; r<10; r++) {
						if (i==r||j==r||k==r||l==r||m==r||n==r||o==r||p==r||q==r) continue;
						uint[10] memory x = lvl2.solution([i,j,k,l,m,n,o,p,q,r]);
						for (uint z=1; z<10; z++) {
						    assert(x[z-1] <= x[z]);
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }

    function test_solution() public {
	uint8 a;
	uint256 b;
	(a, b) = ctf.completeLevel(address(lvl2));
	console2.logUint(a);
	console2.logUint(b);
    }
}
